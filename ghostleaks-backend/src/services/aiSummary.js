const logger = require('../utils/logger');

class AISummaryService {
  constructor() {
    // Service d'IA gratuit ou logique locale
  }

  generateSummary(breachDetails, emailScanned) {
    try {
      const totalBreaches = breachDetails.length;
      
      if (totalBreaches === 0) {
        return {
          summary: "Excellente nouvelle ! Aucune fuite de donnÃ©es dÃ©tectÃ©e pour cette adresse email. Vos informations semblent sÃ©curisÃ©es dans les bases de donnÃ©es publiques.",
          severity: 'low',
          riskScore: 0,
          recommendations: [
            "Continuez Ã  utiliser des mots de passe forts et uniques",
            "Activez l'authentification 2FA quand c'est possible",
            "Effectuez des scans rÃ©guliers pour rester vigilant"
          ]
        };
      }

      // Analyser la sÃ©vÃ©ritÃ© des fuites
      const severityCounts = this.analyzeSeverity(breachDetails);
      const riskScore = this.calculateRiskScore(breachDetails);
      const overallSeverity = this.determineOverallSeverity(severityCounts, riskScore);
      
      // GÃ©nÃ©rer le rÃ©sumÃ© basÃ© sur l'analyse
      const summary = this.generateDetailedSummary(totalBreaches, severityCounts, emailScanned);
      const recommendations = this.generateRecommendations(overallSeverity, breachDetails);

      return {
        summary,
        severity: overallSeverity,
        riskScore,
        recommendations,
        analysis: {
          totalBreaches,
          severityCounts,
          mostRecentBreach: this.findMostRecentBreach(breachDetails),
          largestBreach: this.findLargestBreach(breachDetails),
          sensitiveDataExposed: this.checkSensitiveData(breachDetails)
        }
      };

    } catch (error) {
      logger.error('Error generating AI summary:', error);
      return {
        summary: "Erreur lors de l'analyse des donnÃ©es. Veuillez consulter les dÃ©tails des fuites manuellement.",
        severity: 'medium',
        riskScore: 50,
        recommendations: ["Consultez les dÃ©tails des fuites", "Changez vos mots de passe par prÃ©caution"]
      };
    }
  }

  analyzeSeverity(breachDetails) {
    const counts = { low: 0, medium: 0, high: 0, critical: 0 };
    
    breachDetails.forEach(breach => {
      const severity = this.assessBreachSeverity(breach);
      counts[severity]++;
    });
    
    return counts;
  }

  assessBreachSeverity(breach) {
    let score = 0;
    
    // Score basÃ© sur le nombre de comptes affectÃ©s
    if (breach.pwnCount > 100000000) score += 4; // 100M+
    else if (breach.pwnCount > 10000000) score += 3; // 10M+
    else if (breach.pwnCount > 1000000) score += 2; // 1M+
    else score += 1;
    
    // Score basÃ© sur les types de donnÃ©es
    const sensitiveKeywords = [
      'password', 'credit card', 'social security', 'financial',
      'bank', 'payment', 'ssn', 'passport', 'driver license'
    ];
    
    const dataClasses = (breach.dataClasses || []).join(' ').toLowerCase();
    const hasSensitiveData = sensitiveKeywords.some(keyword => 
      dataClasses.includes(keyword)
    );
    
    if (hasSensitiveData) score += 3;
    if (breach.isVerified) score += 1;
    if (breach.isSensitive) score += 2;
    
    // RÃ©cence de la fuite
    if (breach.breachDate) {
      const breachAge = Date.now() - new Date(breach.breachDate).getTime();
      const ageInYears = breachAge / (365 * 24 * 60 * 60 * 1000);
      
      if (ageInYears < 1) score += 2; // TrÃ¨s rÃ©cent
      else if (ageInYears < 3) score += 1; // RÃ©cent
    }
    
    // DÃ©terminer la sÃ©vÃ©ritÃ©
    if (score >= 8) return 'critical';
    else if (score >= 6) return 'high';
    else if (score >= 4) return 'medium';
    else return 'low';
  }

  calculateRiskScore(breachDetails) {
    let totalScore = 0;
    
    breachDetails.forEach(breach => {
      const severity = this.assessBreachSeverity(breach);
      switch (severity) {
        case 'critical': totalScore += 25; break;
        case 'high': totalScore += 15; break;
        case 'medium': totalScore += 8; break;
        case 'low': totalScore += 3; break;
      }
    });
    
    return Math.min(totalScore, 100); // Score max 100
  }

  determineOverallSeverity(severityCounts, riskScore) {
    if (severityCounts.critical > 0 || riskScore >= 80) return 'critical';
    if (severityCounts.high > 0 || riskScore >= 60) return 'high';
    if (severityCounts.medium > 0 || riskScore >= 30) return 'medium';
    return 'low';
  }

  generateDetailedSummary(totalBreaches, severityCounts, email) {
    const { critical, high, medium, low } = severityCounts;
    
    if (critical > 0) {
      return `ðŸš¨ ALERTE CRITIQUE: Votre email ${email} a Ã©tÃ© trouvÃ© dans ${totalBreaches} fuite(s) de donnÃ©es, dont ${critical} classÃ©e(s) comme critiques. Ces fuites contiennent probablement des informations sensibles comme des mots de passe ou des donnÃ©es financiÃ¨res. Une action immÃ©diate est requise pour sÃ©curiser tous vos comptes.`;
    }
    
    if (high > 0) {
      return `ðŸ”´ RISQUE Ã‰LEVÃ‰: ${totalBreaches} fuite(s) dÃ©tectÃ©e(s) pour ${email}, incluant ${high} fuite(s) Ã  haut risque. Vos donnÃ©es personnelles ont Ã©tÃ© exposÃ©es et pourraient Ãªtre utilisÃ©es par des cybercriminels. Changez vos mots de passe rapidement.`;
    }
    
    if (medium > 0) {
      return `ðŸŸ¡ RISQUE MODÃ‰RÃ‰: ${totalBreaches} fuite(s) identifiÃ©e(s) pour ${email}. Bien que moins critiques, ces expositions nÃ©cessitent votre attention. VÃ©rifiez la sÃ©curitÃ© de vos comptes et changez vos mots de passe par prÃ©caution.`;
    }
    
    return `ðŸŸ¢ RISQUE FAIBLE: ${totalBreaches} fuite(s) mineure(s) dÃ©tectÃ©e(s) pour ${email}. L'exposition semble limitÃ©e, mais restez vigilant et surveillez vos comptes rÃ©guliÃ¨rement.`;
  }

  generateRecommendations(severity, breachDetails) {
    const baseRecommendations = [
      "Utilisez un gestionnaire de mots de passe",
      "Activez l'authentification Ã  deux facteurs",
      "Surveillez rÃ©guliÃ¨rement vos comptes"
    ];

    const severityRecommendations = {
      critical: [
        "ðŸš¨ URGENT: Changez TOUS vos mots de passe IMMÃ‰DIATEMENT",
        "Contactez vos banques pour surveiller les activitÃ©s suspectes",
        "ConsidÃ©rez un gel de crÃ©dit temporaire",
        "VÃ©rifiez tous vos comptes financiers quotidiennement",
        "Signalez toute activitÃ© suspecte aux autoritÃ©s"
      ],
      high: [
        "Changez vos mots de passe dans les 24 heures",
        "VÃ©rifiez vos relevÃ©s bancaires des 3 derniers mois",
        "Activez les alertes de connexion sur tous vos comptes",
        "ConsidÃ©rez changer votre adresse email principale"
      ],
      medium: [
        "Changez vos mots de passe dans la semaine",
        "VÃ©rifiez vos comptes principaux",
        "Activez les notifications de sÃ©curitÃ©",
        "Soyez vigilant aux tentatives de phishing"
      ],
      low: [
        "Changez vos mots de passe quand c'est pratique",
        "Restez vigilant aux emails suspects",
        "Effectuez des scans rÃ©guliers"
      ]
    };

    return [
      ...severityRecommendations[severity],
      ...baseRecommendations
    ];
  }

  findMostRecentBreach(breachDetails) {
    return breachDetails.reduce((latest, current) => {
      const currentDate = new Date(current.date || 0);
      const latestDate = new Date(latest?.date || 0);
      return currentDate > latestDate ? current : latest;
    }, null);
  }

  findLargestBreach(breachDetails) {
    return breachDetails.reduce((largest, current) => {
      return (current.pwnCount || 0) > (largest?.pwnCount || 0) ? current : largest;
    }, null);
  }

  checkSensitiveData(breachDetails) {
    const sensitiveTypes = [];
    const sensitiveKeywords = [
      'password', 'credit card', 'social security', 'financial',
      'bank account', 'payment', 'ssn', 'passport'
    ];

    breachDetails.forEach(breach => {
      const dataClasses = (breach.dataClasses || []).join(' ').toLowerCase();
      sensitiveKeywords.forEach(keyword => {
        if (dataClasses.includes(keyword) && !sensitiveTypes.includes(keyword)) {
          sensitiveTypes.push(keyword);
        }
      });
    });

    return sensitiveTypes;
  }
}

module.exports = new AISummaryService();